<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>{{#if docs.title}}{{docs.title}}{{else}}express-docs{{/if}}</title>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;600;700&display=swap" rel="stylesheet">
    <style>
        :root {
            --bg: #ffffff;
            --text: #1f1f1f;
            --accent: #4f46e5;
            --bg-secondary: #f3f4f6;
            --card: #ffffff;
        }

        [data-theme="dark"] {
            --bg: #121212;
            --text: #e4e4e4;
            --accent: #8b5cf6;
            --bg-secondary: #3a3a3a;
            --card: #1d1d1d;
        }

        * {
            box-sizing: border-box;
            margin: 0;
            padding: 0;
            font-family: 'Inter', sans-serif;
        }

        body {
            background-color: var(--bg);
            color: var(--text);
            padding: 2rem;
            transition: background 0.3s, color 0.3s;
        }

        header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 2rem;
        }

        .logo {
            font-size: 2rem;
            font-weight: 700;
            color: var(--accent);
        }

        .theme-toggle {
            background: none;
            border: 2px solid var(--accent);
            padding: 0.5rem 1rem;
            border-radius: 10px;
            color: var(--accent);
            cursor: pointer;
            font-weight: 600;
        }

        .section-toggle {
            cursor: pointer;
            font-weight: 600;
            color: var(--accent);
            margin-bottom: 0.5rem;
        }

        .doc-section {
            padding: 1.5rem;
            margin-bottom: 1rem;
            border-radius: 12px;
            box-shadow: 0 0 12px rgba(0, 0, 0, 0.05);
            border: 2px solid var(--bg-secondary);
        }

        .doc-section h2 {
            margin-bottom: 1rem;
            font-size: 1.5rem;
            color: var(--accent);
        }

        .endpoint {
            margin-bottom: 1rem;
            padding: 1.5rem;
            border: 1px solid var(--bg-secondary);
            border-radius: 8px;
            background: var(--card);
            color: var(--text);
            overflow: hidden;
        }

        .endpoint-header {
            background: var(--bg-secondary);
            padding: 0.75rem 1rem;
            cursor: pointer;
            display: flex;
            justify-content: space-between;
            align-items: center;
            font-weight: bold;
        }

        .endpoint-body {
            display: none;
            padding: 1rem;
        }

        .method {
            display: inline-block;
            padding: 0.3rem 0.6rem;
            margin-right: 1rem;
            border-radius: 6px;
            font-weight: bold;
            color: white;
        }

        .GET {
            background: #10b981;
        }

        .POST {
            background: #3b82f6;
        }

        .DELETE {
            background: #ef4444;
        }

        .PUT {
            background: #f59e0b;
        }

        .url {
            font-family: monospace;
            color: var(--text);
            background: var(--bg-secondary);
            padding: 0.4rem;
            border-radius: 6px;
            display: block;
            margin-top: 0.3rem;
        }

        .description {
            margin: 0.5rem 0px;
            line-height: 1.6;
        }

        .query-params {
            margin-top: 1rem;
        }

        .query-edit-table {
            margin-top: 0.5rem;
            width: 100%;
            border-collapse: collapse;
        }

        .query-edit-table td {
            border: 1px solid #ccc;
            padding: 0.5rem;
            background: var(--bg-secondary);
            color: var(--text);
        }

        .query-edit-table input[type="text"] {
            width: 100%;
            padding: 0.4rem;
            border-radius: 4px;
            border: 1px solid #ccc;
            background: var(--bg);
            color: var(--text);
        }

        .body-input,
        .try-it,
        .responses {
            margin-top: 1rem;
        }

        textarea,
        input[type="text"] {
            width: 100%;
            padding: 0.5rem;
            border-radius: 6px;
            border: 1px solid #ccc;
            font-family: monospace;
            margin-top: 0.5rem;
            background: var(--bg-secondary);
            color: var(--text);
        }

        button.try-button {
            margin-top: 0.5rem;
            background: var(--accent);
            color: white;
            border: none;
            padding: 0.5rem 1rem;
            border-radius: 8px;
            cursor: pointer;
        }

        pre.response-output {
            background: var(--bg-secondary);
            padding: 1rem;
            border-radius: 8px;
            margin-top: 0.5rem;
            font-size: 0.9rem;
            overflow-x: auto;
        }

        .status-codes {
            margin-top: 1rem;
            font-size: 0.9rem;
        }

        .status-codes span {
            display: block;
            margin-bottom: 0.2rem;
        }

        .file-upload {
            margin-top: 0.5rem;
        }

        .file-preview {
            margin-top: 0.5rem;
        }

        .file-preview img {
            max-width: 100px;
            max-height: 100px;
            border-radius: 6px;
        }

        @media (max-width: 600px) {
            body {
                padding: 1rem;
            }

            .logo {
                font-size: 1.5rem;
            }

            .doc-section h2 {
                font-size: 1.2rem;
            }
        }
    </style>
</head>

<body>
    <header>
        <div class="logo">
            {{#if docs.title}}{{docs.title}}{{else}}express-docs{{/if}}
        </div>
        <button class="theme-toggle" onclick="toggleTheme()">üåô Toggle Theme</button>
    </header>

    <p style="margin-bottom: 2rem; font-weight: 600;">API Version:
        <span style="color: var(--accent)">v{{#if docs.version}}{{docs.version}}{{else}}1.0.0{{/if}}</span>
    </p>

    <p style="margin-bottom: 2rem;">
        {{docs.description}}
    </p>

    {{#each docs.sections}}
    <div class="doc-section">
        <div class="section-toggle" onclick="toggleSection('{{name}}')">
            <h2>{{name}}</h2>
        </div>

        <div id="{{name}}">
            {{#each endpoints}}
            <div class="endpoint">
                <h3>{{name}}</h3>
                <p class="description">{{description}}</p>
                <div class="endpoint-header" onclick="toggleEndpoint(this)">
                    <div>
                        <span class="method {{method}}">{{method}}</span>
                        <span id="{{name}}">{{url}}</span>
                    </div>
                    <div>‚ûï</div>
                </div>
                <div class="endpoint-body">

                    {{#if query}}
                    <div class="query-params">
                        <label><strong>Query Parameters:</strong></label>
                        <table class="query-edit-table">
                            <tbody>
                                {{#each query}}
                                <tr>
                                    <td><strong>{{key}}</strong></td>
                                    <td>
                                        <input type="text" placeholder="{{value}}"
                                            onchange="updateQuery(this, '{{key}}', '{{../name}}')">
                                    </td>
                                </tr>
                                {{/each}}
                            </tbody>
                        </table>
                    </div>
                    {{/if}}

                    <div class="body-input">
                        <label>Request Body (JSON):</label>
                        <textarea id="body-{{url}}-{{method}}" rows="4">{{stringify body}}</textarea>
                    </div>

                    {{#if file}}
                    <div class="file-upload">
                        <label>{{file}}:</label>
                        <input type="file" id="{{file}}-file" onchange="previewFile('{{file}}')">
                        <div class="file-preview" id="{{file}}-preview"></div>
                    </div>
                    {{/if}}

                    <div class="try-it">
                        <button class="try-button"
                            onclick="tryApi('body-{{url}}-{{method}}', '{{file}}', '{{name}}', '{{method}}')">Try
                            it</button>
                        <pre class="response-output" id="output-{{url}}-{{method}}">Waiting for request...</pre>
                    </div>

                    <div class="responses">
                        <h4>Possible Responses:</h4>
                        <div class="status-codes">
                            <span>‚úÖ <strong>200:</strong> Login successful, returns JWT token</span>
                            <span>‚ùå <strong>401:</strong> Invalid credentials</span>
                        </div>
                    </div>
                </div>
            </div>
            {{/each}}
        </div>
    </div>
    {{/each}}

    <script>
        function toggleTheme() {
            const current = document.documentElement.getAttribute('data-theme');
            const nextTheme = current === 'dark' ? 'light' : 'dark';
            document.documentElement.setAttribute('data-theme', nextTheme);
            localStorage.setItem('theme', nextTheme);
        }

        window.onload = () => {
            const savedTheme = localStorage.getItem('theme') || 'light';
            document.documentElement.setAttribute('data-theme', savedTheme);
        }

        function previewFile(idPrefix) {
            const input = document.getElementById(`${idPrefix}-file`);
            const preview = document.getElementById(`${idPrefix}-preview`);
            preview.innerHTML = '';
            const file = input.files[0];
            if (file && file.type.startsWith('image/')) {
                const reader = new FileReader();
                reader.onload = function (e) {
                    const img = document.createElement('img');
                    img.src = e.target.result;
                    preview.appendChild(img);
                }
                reader.readAsDataURL(file);
            }
        }

        function updateQuery(input, key, spanId) {
            const value = input.value.trim();
            const urlSpan = document.getElementById(spanId);
            let newUrl = urlSpan.textContent.trim();

            // Break the URL into base and query
            let [baseUrl, queryString] = newUrl.split("?");
            let params = new URLSearchParams(queryString || "");

            // Update or set the key
            if (value) params.set(key, value);
            else params.delete(key)

            // Build final URL
            const updatedUrl = `${baseUrl}?${params.toString()}`;
            urlSpan.textContent = updatedUrl;
        }

        async function tryApi(bodyId, fileId, urlId, method = 'POST') {
            const outputId = bodyId.replace('body', 'output');
            const bodyText = document.getElementById(bodyId).value;
            const url = document.getElementById(urlId).textContent.trim();
            const fileInput = document.getElementById(fileId);
            const fullUrl = window.location.origin + url;

            try {
                let response;

                // Validate JSON if no file
                if (!fileInput?.files?.length && method !== "GET") {
                    try {
                        JSON.parse(bodyText);
                    } catch (e) {
                        document.getElementById(outputId).textContent = 'Invalid JSON in request body!';
                        return;
                    }
                }

                if (fileInput && fileInput?.files?.length > 0) {
                    const formData = new FormData();
                    formData.append('file', fileInput.files[0]);
                    formData.append('json', new Blob([bodyText], { type: 'application/json' }));

                    response = await fetch(fullUrl, {
                        method,
                        body: method === "GET" ? undefined : formData
                    });
                } else {
                    response = await fetch(fullUrl, {
                        method,
                        headers: method !== "GET" ? { 'Content-Type': 'application/json' } : undefined,
                        body: method === "GET" ? undefined : bodyText
                    });
                }

                const contentType = response.headers.get("content-type");

                let result;
                if (contentType && contentType.includes("application/json")) {
                    result = await response.json();
                    document.getElementById(outputId).textContent =
                        `Status: ${response.status}\n` + JSON.stringify(result, null, 2);
                } else {
                    result = await response.text();
                    document.getElementById(outputId).innerHTML = `<h3>Status: ${response.status}</h3>${result}`;
                }

            } catch (err) {
                document.getElementById(outputId).textContent = 'Error: ' + err.message;
            }
        }

        function toggleEndpoint(headerEl) {
            const bodyEl = headerEl.nextElementSibling;
            const isVisible = bodyEl.style.display === 'block';
            bodyEl.style.display = isVisible ? 'none' : 'block';
            headerEl.querySelector('div:last-child').textContent = isVisible ? '‚ûï' : '‚ûñ';
        }

        function toggleSection(id) {
            const section = document.getElementById(id);
            section.hidden = !section.hidden;
        }
    </script>
</body>

</html>